// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _hamming_window_HH_
#define _hamming_window_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "hamming_window_mucud.h"
#include "hamming_window_wibkb.h"

namespace ap_rtl {

struct hamming_window : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > outdata_address0;
    sc_out< sc_logic > outdata_ce0;
    sc_out< sc_logic > outdata_we0;
    sc_out< sc_lv<32> > outdata_d0;
    sc_out< sc_lv<8> > indata_address0;
    sc_out< sc_logic > indata_ce0;
    sc_in< sc_lv<16> > indata_q0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    hamming_window(sc_module_name name);
    SC_HAS_PROCESS(hamming_window);

    ~hamming_window();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    hamming_window_wibkb* window_coeff_U;
    hamming_window_mucud<1,3,14,16,30>* hamming_window_mucud_U1;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > window_coeff_address0;
    sc_signal< sc_logic > window_coeff_ce0;
    sc_signal< sc_lv<14> > window_coeff_q0;
    sc_signal< sc_lv<9> > i_reg_79;
    sc_signal< sc_lv<1> > tmp_fu_90_p2;
    sc_signal< sc_lv<1> > tmp_reg_124;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > tmp_reg_124_pp0_iter1_reg;
    sc_signal< sc_lv<1> > tmp_reg_124_pp0_iter2_reg;
    sc_signal< sc_lv<1> > tmp_reg_124_pp0_iter3_reg;
    sc_signal< sc_lv<1> > tmp_reg_124_pp0_iter4_reg;
    sc_signal< sc_lv<9> > i_1_fu_96_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > tmp_1_fu_102_p1;
    sc_signal< sc_lv<64> > tmp_1_reg_133;
    sc_signal< sc_lv<64> > tmp_1_reg_133_pp0_iter1_reg;
    sc_signal< sc_lv<64> > tmp_1_reg_133_pp0_iter2_reg;
    sc_signal< sc_lv<64> > tmp_1_reg_133_pp0_iter3_reg;
    sc_signal< sc_lv<64> > tmp_1_reg_133_pp0_iter4_reg;
    sc_signal< sc_lv<14> > window_coeff_load_reg_148;
    sc_signal< sc_lv<16> > indata_load_reg_153;
    sc_signal< sc_lv<30> > grp_fu_118_p2;
    sc_signal< sc_lv<30> > tmp_4_reg_168;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<14> > grp_fu_118_p0;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<30> > grp_fu_118_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_grp_fu_118_p0();
    void thread_grp_fu_118_p00();
    void thread_i_1_fu_96_p2();
    void thread_indata_address0();
    void thread_indata_ce0();
    void thread_outdata_address0();
    void thread_outdata_ce0();
    void thread_outdata_d0();
    void thread_outdata_we0();
    void thread_tmp_1_fu_102_p1();
    void thread_tmp_fu_90_p2();
    void thread_window_coeff_address0();
    void thread_window_coeff_ce0();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
