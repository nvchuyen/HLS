// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "hamming_window.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic hamming_window::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic hamming_window::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> hamming_window::ap_ST_fsm_state1 = "1";
const sc_lv<3> hamming_window::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> hamming_window::ap_ST_fsm_state8 = "100";
const sc_lv<32> hamming_window::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool hamming_window::ap_const_boolean_1 = true;
const sc_lv<32> hamming_window::ap_const_lv32_1 = "1";
const bool hamming_window::ap_const_boolean_0 = false;
const sc_lv<1> hamming_window::ap_const_lv1_0 = "0";
const sc_lv<1> hamming_window::ap_const_lv1_1 = "1";
const sc_lv<9> hamming_window::ap_const_lv9_0 = "000000000";
const sc_lv<9> hamming_window::ap_const_lv9_100 = "100000000";
const sc_lv<9> hamming_window::ap_const_lv9_1 = "1";
const sc_lv<32> hamming_window::ap_const_lv32_2 = "10";

hamming_window::hamming_window(sc_module_name name) : sc_module(name), mVcdFile(0) {
    window_coeff_U = new hamming_window_wibkb("window_coeff_U");
    window_coeff_U->clk(ap_clk);
    window_coeff_U->reset(ap_rst);
    window_coeff_U->address0(window_coeff_address0);
    window_coeff_U->ce0(window_coeff_ce0);
    window_coeff_U->q0(window_coeff_q0);
    hamming_window_mucud_U1 = new hamming_window_mucud<1,3,14,16,30>("hamming_window_mucud_U1");
    hamming_window_mucud_U1->clk(ap_clk);
    hamming_window_mucud_U1->reset(ap_rst);
    hamming_window_mucud_U1->din0(grp_fu_118_p0);
    hamming_window_mucud_U1->din1(indata_load_reg_153);
    hamming_window_mucud_U1->ce(ap_var_for_const0);
    hamming_window_mucud_U1->dout(grp_fu_118_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter5);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( tmp_fu_90_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_fu_118_p0);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( grp_fu_118_p00 );

    SC_METHOD(thread_grp_fu_118_p00);
    sensitive << ( window_coeff_load_reg_148 );

    SC_METHOD(thread_i_1_fu_96_p2);
    sensitive << ( i_reg_79 );

    SC_METHOD(thread_indata_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_1_fu_102_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_indata_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_outdata_address0);
    sensitive << ( tmp_1_reg_133_pp0_iter4_reg );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_outdata_ce0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter5 );

    SC_METHOD(thread_outdata_d0);
    sensitive << ( tmp_4_reg_168 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_outdata_we0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_reg_124_pp0_iter4_reg );
    sensitive << ( ap_enable_reg_pp0_iter5 );

    SC_METHOD(thread_tmp_1_fu_102_p1);
    sensitive << ( i_reg_79 );

    SC_METHOD(thread_tmp_fu_90_p2);
    sensitive << ( i_reg_79 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_window_coeff_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_1_fu_102_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_window_coeff_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_90_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "hamming_window_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, outdata_address0, "(port)outdata_address0");
    sc_trace(mVcdFile, outdata_ce0, "(port)outdata_ce0");
    sc_trace(mVcdFile, outdata_we0, "(port)outdata_we0");
    sc_trace(mVcdFile, outdata_d0, "(port)outdata_d0");
    sc_trace(mVcdFile, indata_address0, "(port)indata_address0");
    sc_trace(mVcdFile, indata_ce0, "(port)indata_ce0");
    sc_trace(mVcdFile, indata_q0, "(port)indata_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, window_coeff_address0, "window_coeff_address0");
    sc_trace(mVcdFile, window_coeff_ce0, "window_coeff_ce0");
    sc_trace(mVcdFile, window_coeff_q0, "window_coeff_q0");
    sc_trace(mVcdFile, i_reg_79, "i_reg_79");
    sc_trace(mVcdFile, tmp_fu_90_p2, "tmp_fu_90_p2");
    sc_trace(mVcdFile, tmp_reg_124, "tmp_reg_124");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter4, "ap_block_state6_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter5, "ap_block_state7_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, tmp_reg_124_pp0_iter1_reg, "tmp_reg_124_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_reg_124_pp0_iter2_reg, "tmp_reg_124_pp0_iter2_reg");
    sc_trace(mVcdFile, tmp_reg_124_pp0_iter3_reg, "tmp_reg_124_pp0_iter3_reg");
    sc_trace(mVcdFile, tmp_reg_124_pp0_iter4_reg, "tmp_reg_124_pp0_iter4_reg");
    sc_trace(mVcdFile, i_1_fu_96_p2, "i_1_fu_96_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_1_fu_102_p1, "tmp_1_fu_102_p1");
    sc_trace(mVcdFile, tmp_1_reg_133, "tmp_1_reg_133");
    sc_trace(mVcdFile, tmp_1_reg_133_pp0_iter1_reg, "tmp_1_reg_133_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_1_reg_133_pp0_iter2_reg, "tmp_1_reg_133_pp0_iter2_reg");
    sc_trace(mVcdFile, tmp_1_reg_133_pp0_iter3_reg, "tmp_1_reg_133_pp0_iter3_reg");
    sc_trace(mVcdFile, tmp_1_reg_133_pp0_iter4_reg, "tmp_1_reg_133_pp0_iter4_reg");
    sc_trace(mVcdFile, window_coeff_load_reg_148, "window_coeff_load_reg_148");
    sc_trace(mVcdFile, indata_load_reg_153, "indata_load_reg_153");
    sc_trace(mVcdFile, grp_fu_118_p2, "grp_fu_118_p2");
    sc_trace(mVcdFile, tmp_4_reg_168, "tmp_4_reg_168");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, grp_fu_118_p0, "grp_fu_118_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, grp_fu_118_p00, "grp_fu_118_p00");
#endif

    }
    mHdltvinHandle.open("hamming_window.hdltvin.dat");
    mHdltvoutHandle.open("hamming_window.hdltvout.dat");
}

hamming_window::~hamming_window() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete window_coeff_U;
    delete hamming_window_mucud_U1;
}

void hamming_window::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void hamming_window::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter5 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(tmp_fu_90_p2.read(), ap_const_lv1_0))) {
        i_reg_79 = i_1_fu_96_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_79 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_reg_124.read(), ap_const_lv1_0))) {
        indata_load_reg_153 = indata_q0.read();
        window_coeff_load_reg_148 = window_coeff_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_fu_90_p2.read(), ap_const_lv1_0))) {
        tmp_1_reg_133 = tmp_1_fu_102_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_1_reg_133_pp0_iter1_reg = tmp_1_reg_133.read();
        tmp_reg_124 = tmp_fu_90_p2.read();
        tmp_reg_124_pp0_iter1_reg = tmp_reg_124.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        tmp_1_reg_133_pp0_iter2_reg = tmp_1_reg_133_pp0_iter1_reg.read();
        tmp_1_reg_133_pp0_iter3_reg = tmp_1_reg_133_pp0_iter2_reg.read();
        tmp_1_reg_133_pp0_iter4_reg = tmp_1_reg_133_pp0_iter3_reg.read();
        tmp_reg_124_pp0_iter2_reg = tmp_reg_124_pp0_iter1_reg.read();
        tmp_reg_124_pp0_iter3_reg = tmp_reg_124_pp0_iter2_reg.read();
        tmp_reg_124_pp0_iter4_reg = tmp_reg_124_pp0_iter3_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_reg_124_pp0_iter3_reg.read(), ap_const_lv1_0))) {
        tmp_4_reg_168 = grp_fu_118_p2.read();
    }
}

void hamming_window::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void hamming_window::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void hamming_window::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[2];
}

void hamming_window::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void hamming_window::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void hamming_window::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void hamming_window::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void hamming_window::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void hamming_window::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void hamming_window::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void hamming_window::thread_ap_block_state6_pp0_stage0_iter4() {
    ap_block_state6_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void hamming_window::thread_ap_block_state7_pp0_stage0_iter5() {
    ap_block_state7_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void hamming_window::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(tmp_fu_90_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void hamming_window::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void hamming_window::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void hamming_window::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void hamming_window::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void hamming_window::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void hamming_window::thread_grp_fu_118_p0() {
    grp_fu_118_p0 =  (sc_lv<14>) (grp_fu_118_p00.read());
}

void hamming_window::thread_grp_fu_118_p00() {
    grp_fu_118_p00 = esl_zext<30,14>(window_coeff_load_reg_148.read());
}

void hamming_window::thread_i_1_fu_96_p2() {
    i_1_fu_96_p2 = (!i_reg_79.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(i_reg_79.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void hamming_window::thread_indata_address0() {
    indata_address0 =  (sc_lv<8>) (tmp_1_fu_102_p1.read());
}

void hamming_window::thread_indata_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        indata_ce0 = ap_const_logic_1;
    } else {
        indata_ce0 = ap_const_logic_0;
    }
}

void hamming_window::thread_outdata_address0() {
    outdata_address0 =  (sc_lv<8>) (tmp_1_reg_133_pp0_iter4_reg.read());
}

void hamming_window::thread_outdata_ce0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()))) {
        outdata_ce0 = ap_const_logic_1;
    } else {
        outdata_ce0 = ap_const_logic_0;
    }
}

void hamming_window::thread_outdata_d0() {
    outdata_d0 = esl_sext<32,30>(tmp_4_reg_168.read());
}

void hamming_window::thread_outdata_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(tmp_reg_124_pp0_iter4_reg.read(), ap_const_lv1_0))) {
        outdata_we0 = ap_const_logic_1;
    } else {
        outdata_we0 = ap_const_logic_0;
    }
}

void hamming_window::thread_tmp_1_fu_102_p1() {
    tmp_1_fu_102_p1 = esl_zext<64,9>(i_reg_79.read());
}

void hamming_window::thread_tmp_fu_90_p2() {
    tmp_fu_90_p2 = (!i_reg_79.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_79.read() == ap_const_lv9_100);
}

void hamming_window::thread_window_coeff_address0() {
    window_coeff_address0 =  (sc_lv<8>) (tmp_1_fu_102_p1.read());
}

void hamming_window::thread_window_coeff_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        window_coeff_ce0 = ap_const_logic_1;
    } else {
        window_coeff_ce0 = ap_const_logic_0;
    }
}

void hamming_window::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter4.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_fu_90_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter4.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(tmp_fu_90_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void hamming_window::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outdata_address0\" :  \"" << outdata_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outdata_ce0\" :  \"" << outdata_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outdata_we0\" :  \"" << outdata_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outdata_d0\" :  \"" << outdata_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"indata_address0\" :  \"" << indata_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"indata_ce0\" :  \"" << indata_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"indata_q0\" :  \"" << indata_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

